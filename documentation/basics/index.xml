<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HPCC Home – Linux Basics</title><link>/documentation/basics/</link><description>Recent content in Linux Basics on HPCC Home</description><generator>Hugo -- gohugo.io</generator><atom:link href="/documentation/basics/index.xml" rel="self" type="application/rss+xml"/><item><title>Documentation: Access</title><link>/documentation/basics/manuals_linux-basics_intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/documentation/basics/manuals_linux-basics_intro/</guid><description>
&lt;h2 id="how-to-get-access">How to Get Access?&lt;/h2>
&lt;p>Many of the commands referenced here may work in any local &lt;code>bash&lt;/code> shell, however we will focus on running these on the Linux HPC cluster.
In order to gain access to the cluster, you will need to request an account and also download an SSH client.&lt;/p>
&lt;ul>
&lt;li>Users at UC Riverside can apply for an account on our Linux clusters by sending an account request to Support (&lt;a href="mailto:support@hpcc.ucr.edu">support@hpcc.ucr.edu&lt;/a>).&lt;/li>
&lt;li>Install your preferred ssh client on your local machine (we can help you with this).&lt;/li>
&lt;/ul>
&lt;h3 id="windows">Windows&lt;/h3>
&lt;ol>
&lt;li>Open MobaXTerm &lt;a href="https://mobaxterm.mobatek.net/download-home-edition.html">Download MobaXTerm&lt;/a>&lt;/li>
&lt;li>Click on &amp;ldquo;Start local terminal&amp;rdquo; in the center of the window.&lt;/li>
&lt;/ol>
&lt;h3 id="mac">Mac&lt;/h3>
&lt;ol>
&lt;li>Download and install &lt;a href="https://www.xquartz.org/">XQuartz&lt;/a>, this is optional and only needed if you want X11 Forwarding.&lt;/li>
&lt;li>Open Terminal or &lt;a href="https://www.iterm2.com/downloads.html">iterm2&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="logging-in">Logging in&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Now that you have a terminal open, execute the following on the command line:
&lt;code>ssh -X myusername@cluster.hpcc.ucr.edu&lt;/code>&lt;/p>
&lt;p>&lt;code>myusername&lt;/code> is your username on the cluster.
You will be asked to enter your password. Simply type it (even if you cannot see anything) and press enter.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="change-password">Change Password&lt;/h2>
&lt;ol>
&lt;li>Log-in to the cluster via SSH&lt;/li>
&lt;li>Once you have logged in, type the following command:
&lt;code>passwd&lt;/code>&lt;/li>
&lt;li>Enter your current password (the random characters that you were given as your initial password)&lt;/li>
&lt;li>Enter your new password (you will be asked to type it twice for verification)&lt;/li>
&lt;/ol>
&lt;h3 id="minimum-password-requirements">Minimum password requirements&lt;/h3>
&lt;ul>
&lt;li>Total length at least 8 characters long&lt;/li>
&lt;li>Must have at least 3 of the following:
&lt;ul>
&lt;li>Lowercase character&lt;/li>
&lt;li>Uppercase character&lt;/li>
&lt;li>Number&lt;/li>
&lt;li>Punctuation character&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Documentation: Command Line Basics</title><link>/documentation/basics/manuals_linux-basics_cmdline-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/documentation/basics/manuals_linux-basics_cmdline-basics/</guid><description>
&lt;h2 id="basics">Basics&lt;/h2>
&lt;h3 id="syntax-and-notes">Syntax and Notes&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Remember the UNIX/Linux command line is case sensitive!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The hash (pound) sign &lt;code>#&lt;/code> indicates end of a command and the start of a comment.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The notation &lt;code>&amp;lt;...&amp;gt;&lt;/code> refers to variables and file names that need to be specified by the user. The symbols &lt;code>&amp;lt;&lt;/code> and &lt;code>&amp;gt;&lt;/code> need to be excluded.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>No need to memorize all of these commands, by using these commands you will naturally memorize the most frequently used.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When specifying file names:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>.&lt;/code> (dot) refers to the present working directory&lt;/li>
&lt;li>The &lt;code>~&lt;/code> (tilde) refers to user&amp;rsquo;s home directory&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="commands">Commands&lt;/h3>
&lt;h4 id="navigation-and-exploration">Navigation and Exploration&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">pwd&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># &amp;#34;Print working directory&amp;#34;; show your current path&lt;/span>
ls &lt;span style="color:#8f5902;font-style:italic"># &amp;#34;List&amp;#34; contents of current directory&lt;/span>
ls -l &lt;span style="color:#8f5902;font-style:italic"># Similar to ls, but provides additional info on files and directories&lt;/span>
ls -a &lt;span style="color:#8f5902;font-style:italic"># List all files, including hidden files (.name) as well&lt;/span>
ls -R &lt;span style="color:#8f5902;font-style:italic"># Lists subdirectories recursively&lt;/span>
ls -t &lt;span style="color:#8f5902;font-style:italic"># Lists files in chronological order&lt;/span>
&lt;span style="color:#204a87">cd&lt;/span> &amp;lt;dir_name&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># &amp;#34;Change directory&amp;#34; to specified path&lt;/span>
&lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Brings you to your home directory&lt;/span>
&lt;span style="color:#204a87">cd&lt;/span> ~ &lt;span style="color:#8f5902;font-style:italic"># Also bring you to your home directory&lt;/span>
&lt;span style="color:#204a87">cd&lt;/span> .. &lt;span style="color:#8f5902;font-style:italic"># Moves one directory up&lt;/span>
&lt;span style="color:#204a87">cd&lt;/span> ../../ &lt;span style="color:#8f5902;font-style:italic"># Moves two directories up (and so on)&lt;/span>
&lt;span style="color:#204a87">cd&lt;/span> - &lt;span style="color:#8f5902;font-style:italic"># Go back to you were previously (before the last directory change)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="informative">Informative&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">file &amp;lt;file-name&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Show type of file (text, binary, compressed, etc...)&lt;/span>
id &lt;span style="color:#8f5902;font-style:italic"># Shows your user name and associated groups&lt;/span>
hostname &lt;span style="color:#8f5902;font-style:italic"># Shows the name of the machine your shell is currently on&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="files-and-directories">Files and Directories&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir &amp;lt;dir_name&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Creates specified directory&lt;/span>
rmdir &amp;lt;dir_name&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Removes empty directory&lt;/span>
rm &amp;lt;file_name&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Removes file_name&lt;/span>
rm -r &amp;lt;dir_name&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Removes directory including its contents, but asks for confirmation&lt;/span>
rm -rf &amp;lt;dir_name&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Same as above, but turns confirmation off. Use with caution&lt;/span>
cp &amp;lt;name&amp;gt; &amp;lt;path&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Copy file/directory as specified in path (-r to include content in directories)&lt;/span>
mv &amp;lt;name1&amp;gt; &amp;lt;name2&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Renames directories or files&lt;/span>
mv &amp;lt;name&amp;gt; &amp;lt;path&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Moves file/directory as specified in path&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="copy-and-paste">Copy and paste&lt;/h3>
&lt;p>The methods to copy and paste on the command line differ depending on your operating systems (ie. Mac OSX, MS Windows, Linux) and your SSH application (ie. Terminal, MobaXTerm).&lt;/p>
&lt;ul>
&lt;li>Linux (xterm)&lt;/li>
&lt;/ul>
&lt;pre>&lt;code># Copy
CTRL+SHIFT+C
# Paste
CTRL+SHIFT+V
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>MS Windows (MobaXTerm)&lt;/li>
&lt;/ul>
&lt;pre>&lt;code># Copy by highlighting with mouse
# Paste
SHIFT+INSERT
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Mac OSX (Terminal)&lt;/li>
&lt;/ul>
&lt;pre>&lt;code># Copy
COMMAND+c
# Paste
COMMAND+v
&lt;/code>&lt;/pre>&lt;h3 id="shortcuts">Shortcuts&lt;/h3>
&lt;h4 id="command-history">Command History&lt;/h4>
&lt;ul>
&lt;li>↑&lt;code> # Up arrow key scrolls backwards through command history&lt;/code>&lt;/li>
&lt;li>↓&lt;code> # Down arrow key scrolls forwards through command history&lt;/code>&lt;/li>
&lt;li>&lt;code>history # Shows all commands you have used recently&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="auto-completion">Auto-completion&lt;/h4>
&lt;p>The tab (⇥) key auto completes commands or file names if there is only one option.
Hitting the tab (⇥) key twice will list multiple options.
Keep in mind that there are no spaces between the tab (⇥) keys and the partial names of commands or files.&lt;/p>
&lt;p>Show all directories under my home that I can &lt;code>cd&lt;/code> into:&lt;/p>
&lt;p>&lt;code>cd ~/&lt;/code>⇥⇥&lt;/p>
&lt;p>Show all files that I can &lt;code>ls&lt;/code> with names that start with &amp;ldquo;myfile&amp;rdquo;:&lt;/p>
&lt;p>&lt;code>ls myfile&lt;/code>⇥⇥&lt;/p>
&lt;p>Show all commands that I can run with names that start with &amp;ldquo;sp&amp;rdquo;:&lt;/p>
&lt;p>&lt;code>sp&lt;/code>⇥⇥&lt;/p>
&lt;h4 id="cursor">Cursor&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">Ctrl+a &lt;span style="color:#8f5902;font-style:italic"># Cursor to beginning of command line&lt;/span>
Ctrl+e &lt;span style="color:#8f5902;font-style:italic"># Cursor to end of command line&lt;/span>
Ctrl+w &lt;span style="color:#8f5902;font-style:italic"># Cut last word&lt;/span>
Ctrl+k &lt;span style="color:#8f5902;font-style:italic"># Cut to the end of the line&lt;/span>
Ctrl+y &lt;span style="color:#8f5902;font-style:italic"># Paste (&amp;#34;yank&amp;#34;) content that was cut earlier (by Ctrl-w or Ctrl-k)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="other-useful-unix-commands">Other Useful Unix Commands&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">df -h /scratch &lt;span style="color:#8f5902;font-style:italic"># Show local disk space for /scratch, do not use for /rhome or /bigdata&lt;/span>
free -h &lt;span style="color:#8f5902;font-style:italic"># Show memory of current machine&lt;/span>
bc &lt;span style="color:#8f5902;font-style:italic"># Command-line calculator (to exit type &amp;#39;quit&amp;#39;)&lt;/span>
wget &amp;lt;URL&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Download a file or directory from the web&lt;/span>
ln -s &amp;lt;FILENAME1&amp;gt; &amp;lt;FILENAME2&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Creates symbolic link (shortcut, or alias) for file or directory&lt;/span>
du -sh . &lt;span style="color:#8f5902;font-style:italic"># Shows size of current directory&lt;/span>
du -sh &amp;lt;FILENAME&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Shows size of individual file&lt;/span>
du -s * &lt;span style="color:#000;font-weight:bold">|&lt;/span> sort -nr &lt;span style="color:#8f5902;font-style:italic"># Shows size of each file within current directory, sorted by size&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="help">Help&lt;/h2>
&lt;p>Not all command have help documentation available, however one of these methods will likely work:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">help&lt;/span> &amp;lt;COMMAND&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Show help for a Bash command&lt;/span>
man &amp;lt;COMMAND&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Show the manual page for a program (press the &amp;#39;q&amp;#39; key to exit)&lt;/span>
&amp;lt;COMMAND&amp;gt; --help &lt;span style="color:#8f5902;font-style:italic"># Show help documentation for command&lt;/span>
&amp;lt;COMMAND&amp;gt; -h &lt;span style="color:#8f5902;font-style:italic"># Show help documentation for command&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Online help: &lt;a href="https://www.google.com/">Google&lt;/a> is your friend.&lt;/p>
&lt;p>Universally available Linux commands, with detailed examples and explanations: &lt;a href="https://www.linuxconfig.org/linux-commands">https://www.linuxconfig.org/linux-commands&lt;/a>&lt;/p></description></item><item><title>Documentation: File Systems and Transfers</title><link>/documentation/basics/manuals_linux-basics_filesystems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/documentation/basics/manuals_linux-basics_filesystems/</guid><description>
&lt;h2 id="file-systems">File Systems&lt;/h2>
&lt;p>The file system in Linux is where you can save data, files, scripts, etc.
There are different storage pools based on the path.
In Linux you can provide any storage pool from any directory, not like MS Windows systems, where a drive letter is assigned to each storage pool (ie. &amp;ldquo;C:&amp;rdquo;,&amp;ldquo;D:&amp;quot;).
This means that by navigating through nested directories, you may find different capacity limits, depending on where you are.&lt;/p>
&lt;h2 id="locations">Locations&lt;/h2>
&lt;p>Most unix system, including Linux, have a common directory hierarchy. The following is called the &lt;code>root&lt;/code> level, since it is at the &amp;ldquo;top&amp;rdquo; like roots of a inverted tree:&lt;/p>
&lt;pre>&lt;code>/
|-- bigdata
|-- bin
|-- boot
|-- dev
|-- etc
|-- home
|-- lib
|-- lib64
|-- media
|-- mnt
|-- opt
|-- proc
|-- rhome
|-- root
|-- run
|-- sbin
|-- srv
|-- sys
|-- tmp
|-- usr
`-- var
&lt;/code>&lt;/pre>&lt;p>The two most important directories are &lt;code>/rhome&lt;/code> and &lt;code>/bigdata&lt;/code>, since this is where your code and data will be stored.
These two directories are IBM Spectrum Scale (GPFS) pools, so storage quotas apply.
Your home directory lives directly under &lt;code>/rhome&lt;/code> and your groups shared storage lives under &lt;code>/bigdata&lt;/code> (if extra storage was purchased).
These two &amp;ldquo;bigdata&amp;rdquo; directories &lt;code>/bigdata/groupname/username&lt;/code> and &lt;code>/bigdata/groupname/shared&lt;/code> are symlinked (alias/shortcut) to your home directory for convenience, as seen here:&lt;/p>
&lt;pre>&lt;code>/
|-- bigdata
|-- groupname (Quota based on purchase)
|-- username &amp;lt;-------------|
|-- shared &amp;lt;----------| |
|-- bin | |
|-- boot | |
|-- dev | |
|-- etc | |
|-- home | |
|-- lib | |
|-- lib64 | |
|-- media | |
|-- mnt | |
|-- opt | |
|-- proc | |
|-- rhome | |
|-- username (20GB Quota) | |
|-- shared ----------&amp;gt;| |
|-- bigdata --------------&amp;gt;|
|-- root
|-- run
|-- sbin
|-- srv
|-- sys
|-- tmp
|-- usr
`-- var
&lt;/code>&lt;/pre>&lt;p>For more information regarding these locations, and others, visit &lt;a href="manuals_linux-cluster_storage">HPCC Cluster: Data Storage&lt;/a>.&lt;/p>
&lt;h3 id="case-sensitive">Case sensitive&lt;/h3>
&lt;p>All paths and commands are case sensitive, an uppercase letter is not the same as a lowercase letter.&lt;/p>
&lt;h3 id="path-types">Path Types&lt;/h3>
&lt;p>An absolute path is a full path from top to bottom, from the &lt;code>root&lt;/code> to the &lt;code>leaf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">/rhome/username/example_dir/example_file
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A relative path is a partial path with the current working directory is the starting point:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">example_dir/example_file
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="commands">Commands&lt;/h2>
&lt;p>Here are many common commands related to files and file systems (run &lt;code>man &amp;lt;command&amp;gt;&lt;/code> for more information):&lt;/p>
&lt;pre>&lt;code>pwd # Print working directory
ls # List files in directory
touch # Make an empty file
mkdir # Make a directory
cd # Change to directory
cp # Copy file[s] from a directory to a directory
mv # Move file[s] from a directory to a directory
rm # Remove a file
rmdir # Remove an empty directory
df # Check size of storage pool
du # Check size of file or directory
check_quota # Check quota for home and bigdata
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>Note: &lt;code>CTRL+c&lt;/code> will cancel a running command&lt;/p>
&lt;/blockquote>
&lt;h2 id="file-transfers">File Transfers&lt;/h2>
&lt;p>If you would rather use a graphical interface, instead of the command line, try FileZilla &lt;a href="https://filezilla-project.org/">FileZilla&lt;/a> for file exchanges.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>To copy files To the server run the following on your workstation or laptop:&lt;/p>
&lt;p>&lt;code>scp -r &amp;lt;path_to_directory&amp;gt; &amp;lt;your_username&amp;gt;@&amp;lt;host_name&amp;gt;:&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To copy files From the server run the following on your workstation or laptop:&lt;/p>
&lt;p>&lt;code>scp -r &amp;lt;your_username&amp;gt;@&amp;lt;host_name&amp;gt;:&amp;lt;path_to_directory&amp;gt; .&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>For more advanced methods of file transfers to the cluster refer to &lt;a href="manuals_linux-cluster_sharing">Cluster - Sharing Data&lt;/a>.&lt;/p></description></item><item><title>Documentation: Finding Things</title><link>/documentation/basics/manuals_linux-basics_finding-things/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/documentation/basics/manuals_linux-basics_finding-things/</guid><description>
&lt;h2 id="find-files">Find Files&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">find ~ -name &lt;span style="color:#4e9a06">&amp;#34;*pattern*&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Searches for *pattern* in and below your home directory&lt;/span>
find ~ -iname &lt;span style="color:#4e9a06">&amp;#34;*pattern*&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Same as above, but case insensitive&lt;/span>
find ~ -type f -mtime -2 &lt;span style="color:#8f5902;font-style:italic"># Searches for files you have modified in the last two days&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Useful &lt;code>find&lt;/code> arguments:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-user &amp;lt;userName&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>-group &amp;lt;groupName&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>-ctime &amp;lt;number of days ago changed&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>-exec &amp;lt;command to run on each file&amp;gt; {} \;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="find-text">Find Text&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">grep &lt;span style="color:#4e9a06">&amp;#34;pattern&amp;#34;&lt;/span> &amp;lt;FILENAME&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Provides lines in a file where &amp;#34;pattern&amp;#34; appears&lt;/span>
grep -H &lt;span style="color:#4e9a06">&amp;#34;pattern&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># -H prints out file name in front of pattern&lt;/span>
find ~ -name &lt;span style="color:#4e9a06">&amp;#34;*.txt&amp;#34;&lt;/span> -exec grep -H &lt;span style="color:#4e9a06">&amp;#34;pattern&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{}&lt;/span> &lt;span style="color:#4e9a06">\;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Search lines where &amp;#34;pattern&amp;#34; appears in files with names that end with &amp;#34;.txt&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="find-applications">Find Applications&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">which &amp;lt;APPLICATION_NAME&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Location of application&lt;/span>
whereis &amp;lt;APPLICATION_NAME&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Searches for executables in set of directories&lt;/span>
rpm -qa &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep &lt;span style="color:#4e9a06">&amp;#34;pattern&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># List all RPM packages and filter based on &amp;#34;pattern&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Documentation: Permissions and Ownership</title><link>/documentation/basics/manuals_linux-basics_permissions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/documentation/basics/manuals_linux-basics_permissions/</guid><description>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>In Linux (and Unix systems in general), access to files and directories is
controlled by a system of owners, groups, and permission bits. Changing these
settings is necessary to control access by other users.
The permission system also affects what files can be executed.&lt;/p>
&lt;h2 id="ownership-levels">Ownership Levels&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>user (u)&lt;/strong> - User ownership of a file/directory. This user has the special
right to change the permission bits and group ownership.&lt;/li>
&lt;li>&lt;strong>group (g)&lt;/strong> - Group ownership of a file/directory. Members of this group may
be assigned greater access rights than non-members.&lt;/li>
&lt;li>&lt;strong>other (o)&lt;/strong> - Everyone else that isn&amp;rsquo;t the owning user or from the owning
group.&lt;/li>
&lt;/ul>
&lt;h2 id="permission-bits">Permission Bits&lt;/h2>
&lt;p>The elemental permissions in Linux/Unix are read, write, and execute. Users and
groups can have one many, or none of these rights. Their meanings are as follows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Letter&lt;/th>
&lt;th>Number&lt;/th>
&lt;th>File&lt;/th>
&lt;th>Directory&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Read&lt;/td>
&lt;td>r&lt;/td>
&lt;td>4&lt;/td>
&lt;td>View the contents&lt;/td>
&lt;td>View the listings&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Write&lt;/td>
&lt;td>w&lt;/td>
&lt;td>2&lt;/td>
&lt;td>Modify the contents&lt;/td>
&lt;td>Create a new file, or rename or delete existing files&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Execute&lt;/td>
&lt;td>x&lt;/td>
&lt;td>1&lt;/td>
&lt;td>Execute a program/script&lt;/td>
&lt;td>Traversal rights&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="checking-permissions">Checking Permissions&lt;/h2>
&lt;p>Annotated output for &lt;code>ls -la&lt;/code>:&lt;/p>
&lt;pre>&lt;code>---------- File type (d = directory, - = regular file, l = symlink)
|--------- User permission triplet
|| ------ Group permission triplet
|| | --- Other permission triplet
|| | |
|| | | [user] [group]
drwx-----x 61 username groupname 4096 Feb 24 16:39 ./
drwxr-xr-x 688 root root 262144 Feb 24 11:05 ../
drwx------ 2 username groupname 4096 Feb 2 22:45 .ssh/
drwxr-xr-x 5 username groupname 4096 Dec 12 15:57 Downloads/
drwxr-xr-x 2 username groupname 4096 Jan 9 16:29 bin/
-rw------- 1 username groupname 7960 Feb 23 18:37 .bash_history
-rw-r--r-- 1 username groupname 306 Nov 3 15:08 .bashrc
-rw-r--r-- 1 username groupname 677 Apr 8 2013 .profile
-rw-r--r-- 1 username groupname 128 Nov 30 12:38 .tmux.conf
-rw-r--r-- 1 username groupname 12126 Nov 2 13:14 .vimrc
lrwxrwxrwx 1 username groupname 23 Sep 12 10:49 bigdata -&amp;gt; /bigdata/groupname/username/
-rw-r--r-- 1 username groupname 5657 Sep 19 11:31 bookmarks.html
lrwxrwxrwx 1 username groupname 23 Sep 12 10:49 shared -&amp;gt; /bigdata/groupname/shared/
&lt;/code>&lt;/pre>&lt;p>Assign write and execute permissions to user and group&lt;/p>
&lt;p>&lt;code>chmod ug+rx my_file&lt;/code>&lt;/p>
&lt;p>To remove all permissions from all three user groups&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">chmod ugo-rwx my_file
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;+&amp;#39; causes the permissions selected to be added&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;-&amp;#39; causes them to be removed&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;=&amp;#39; causes them to be the only permissions that the file has.&lt;/span>
chmod +rx public_html/ or $ chmod &lt;span style="color:#0000cf;font-weight:bold">755&lt;/span> public_html/ &lt;span style="color:#8f5902;font-style:italic"># Example for number system:&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="change-ownership">Change ownership&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">chown &amp;lt;user&amp;gt; &amp;lt;file or dir&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># changes user ownership&lt;/span>
chgrp &amp;lt;group&amp;gt; &amp;lt;file or dir&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># changes group ownership&lt;/span>
chown &amp;lt;user&amp;gt;:&amp;lt;group&amp;gt; &amp;lt;file or dir&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># changes user &amp;amp; group ownership&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Documentation: Piping</title><link>/documentation/basics/manuals_linux-basics_pipes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/documentation/basics/manuals_linux-basics_pipes/</guid><description>
&lt;h2 id="piping">Piping&lt;/h2>
&lt;p>One of the the most powerful things you can do in Linux is piping.
This allows chaining of commands so that the output (&lt;code>STDOUT&lt;/code>) of one command is the input (&lt;code>STDIN&lt;/code>) for another.
This is done by placing a &lt;code>|&lt;/code> (pipe) character between the commands.
Please note that not all commands support this, for example if your command is not taking input from &lt;code>STDIN&lt;/code>.&lt;/p>
&lt;p>As an example, let&amp;rsquo;s collect all the lines where &lt;code>pattern&lt;/code> is found in a file, then count how many lines were found:&lt;/p>
&lt;pre>&lt;code>grep 'pattern' filename | wc -l
&lt;/code>&lt;/pre>&lt;p>You can pipe as many commands together as you like, not just two.
For example, you can combined two CSV files and extract the first column, then filter for only unique values:&lt;/p>
&lt;pre>&lt;code>cat filename1.csv filename2.csv | cut -f 1 | sort | uniq
&lt;/code>&lt;/pre>&lt;p>For a few more simple examples, please visit here &lt;a href="https://www.guru99.com/linux-pipe-grep.html">Pipe, Grep and Sort Command in Linux/Unix with Examples&lt;/a>.
Or you can try searching Google for even more complex examples, the possibilities are endless.&lt;/p></description></item><item><title>Documentation: Process Management</title><link>/documentation/basics/manuals_linux-basics_processes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/documentation/basics/manuals_linux-basics_processes/</guid><description>
&lt;h2 id="process-management">Process Management&lt;/h2>
&lt;p>Basic Linux process management commands only apply to processes that are running on the current machine you are logged into.
This means that you cannot use these commands to manage jobs.
Jobs on the cluster are managed through &lt;code>Slurm&lt;/code>, see &lt;a href="manuals_linux-cluster_jobs">Cluster Jobs&lt;/a> for more details.
However, these commands are still useful for pausing, backgrounding, killing processes on a login node directly.
This commands could also be useful when running an interactive session on a compute node.&lt;/p>
&lt;h3 id="user-management">User Management&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">top &lt;span style="color:#8f5902;font-style:italic"># view top consumers of memory and CPU (press 1 to see per-CPU statistics)&lt;/span>
who &lt;span style="color:#8f5902;font-style:italic"># Shows who is logged into system&lt;/span>
w &lt;span style="color:#8f5902;font-style:italic"># Shows which users are logged into system and what they are doing&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="process-management-1">Process Management&lt;/h3>
&lt;h4 id="processes">Processes&lt;/h4>
&lt;pre>&lt;code>ps # Shows processes running by user
ps -e # Shows all processes on system; try also '-a' and '-x' arguments
ps ux -u &amp;lt;USERNAME&amp;gt; # Shows all processes owned by user
ps axjf # Shows the child-parent hierarchy of all processes
ps -o %t -p &amp;lt;PID&amp;gt; # Shows how long a particular process was running.
# (E.g. 6-04:30:50 means 6 days 4 hours ...)
&lt;/code>&lt;/pre>&lt;p>Here are two common utilities for displaying processes, sorting, and even killing them:&lt;/p>
&lt;pre>&lt;code>top # Basic text based interface for exploring and managing processes
htop # Text based interface for exploring and managing processes
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>Note &lt;code>q&lt;/code> to quit and &lt;code>?&lt;/code> to see help&lt;/p>
&lt;/blockquote>
&lt;h4 id="background-resume-cancel">Background Resume Cancel&lt;/h4>
&lt;pre>&lt;code>CTRL+z ENTER # Suspend a process in the background
fg # Resume a suspended process and brings it into foreground
bg # Resume a suspended process but keeps it running in the background
CTRL+c # Cancel the process that is currently running in the foreground
&lt;/code>&lt;/pre>&lt;h4 id="pid">PID&lt;/h4>
&lt;pre>&lt;code>echo $! # Get PID of last executed command
&lt;/code>&lt;/pre>&lt;h4 id="killing">Killing&lt;/h4>
&lt;pre>&lt;code>kill -l # List all of the signals that can be sent to a process
kill &amp;lt;PID&amp;gt; # Kill a specific process with process ID using SIGTERM
kill -9 &amp;lt;PID&amp;gt; # Violently kill process with process ID using SIGKILL, may corrupt files
&lt;/code>&lt;/pre>&lt;h3 id="more-on-terminating-processes">More on Terminating Processes&lt;/h3>
&lt;p>&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-ps-kill-and-nice-to-manage-processes-in-linux">DigitalOcean - How To Use ps, kill, and nice to Manage Processes in Linux&lt;/a>&lt;/p></description></item><item><title>Documentation: Shell Bootcamp</title><link>/documentation/basics/manuals_linux-basics_shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/documentation/basics/manuals_linux-basics_shell/</guid><description>
&lt;h2 id="the-unix-shell">The Unix Shell&lt;/h2>
&lt;p>When you log into UNIX/LINUX system, then is starts a program called the Shell. It provides you with a working environment and interface to the operating system. Usually there are several different shell programs installed. The shell program bash is one of the most common ones.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">finger &amp;lt;user_name&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># shows which shell you are using&lt;/span>
chsh -l &lt;span style="color:#8f5902;font-style:italic"># gives list of shell programs available on your system (does not work on all UNIX variants)&lt;/span>
&amp;lt;shell_name&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># switches to different shell&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stdin-stdout-stderr-redirections-and-wildcards">STDIN, STDOUT, STDERR, Redirections, and Wildcards&lt;/h3>
&lt;p>See &lt;a href="http://www.tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-3.html">LINUX HOWTOs&lt;/a>&lt;/p>
&lt;p>By default, UNIX commands read from standard input (STDIN) and send their output to standard out (STDOUT).&lt;/p>
&lt;p>You can redirect them by using the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&amp;lt;beginning-of-filename&amp;gt;* &lt;span style="color:#8f5902;font-style:italic"># * is wildcard to specify many files&lt;/span>
ls &amp;gt; file &lt;span style="color:#8f5902;font-style:italic"># prints ls output into specified file&lt;/span>
&lt;span style="color:#204a87">command&lt;/span> &amp;lt; my_file &lt;span style="color:#8f5902;font-style:italic"># uses file after &amp;#39;&amp;lt;&amp;#39; as STDIN&lt;/span>
&lt;span style="color:#204a87">command&lt;/span> &amp;gt;&amp;gt; my_file &lt;span style="color:#8f5902;font-style:italic"># appends output of one command to file&lt;/span>
&lt;span style="color:#204a87">command&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> tee my_file &lt;span style="color:#8f5902;font-style:italic"># writes STDOUT to file and prints it to screen&lt;/span>
&lt;span style="color:#204a87">command&lt;/span> &amp;gt; my_file&lt;span style="color:#000;font-weight:bold">;&lt;/span> cat my_file &lt;span style="color:#8f5902;font-style:italic"># writes STDOUT to file and prints it to screen&lt;/span>
&lt;span style="color:#204a87">command&lt;/span> &amp;gt; /dev/null &lt;span style="color:#8f5902;font-style:italic"># turns off progress info of applications by redirecting&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># their output to /dev/null&lt;/span>
grep my_pattern my_file &lt;span style="color:#000;font-weight:bold">|&lt;/span> wc &lt;span style="color:#8f5902;font-style:italic"># Pipes (|) output of &amp;#39;grep&amp;#39; into &amp;#39;wc&amp;#39;&lt;/span>
grep my_pattern my_non_existing_file &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &amp;gt; my_stderr &lt;span style="color:#8f5902;font-style:italic"># prints STDERR to file&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="useful-shell-commands">Useful shell commands&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cat &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; &amp;gt; &amp;lt;cat.out&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># concatenate files in output file &amp;#39;cat.out&amp;#39;&lt;/span>
paste &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; &amp;gt; &amp;lt;paste.out&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># merges lines of files and separates them by tabs (useful for tables)&lt;/span>
cmp &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># tells you whether two files are identical&lt;/span>
diff &amp;lt;fileA&amp;gt; &amp;lt;fileB&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># finds differences between two files&lt;/span>
head -&amp;lt;number&amp;gt; &amp;lt;file&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># prints first lines of a file&lt;/span>
tail -&amp;lt;number&amp;gt; &amp;lt;file&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># prints last lines of a file&lt;/span>
split -l &amp;lt;number&amp;gt; &amp;lt;file&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># splits lines of file into many smaller ones&lt;/span>
csplit -f out fasta_batch &lt;span style="color:#4e9a06">&amp;#34;%^&amp;gt;%&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/^&amp;gt;/&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;{*}&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># splits fasta batch file into many files&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># at &amp;#39;&amp;gt;&amp;#39;&lt;/span>
sort &amp;lt;file&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># sorts single file, many files and can merge (-m)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># them, -b ignores leading white space, ...&lt;/span>
sort -k 2,2 -k 3,3n input_file &amp;gt; output_file &lt;span style="color:#8f5902;font-style:italic"># sorts in table column 2 alphabetically and&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># column 3 numerically, &amp;#39;-k&amp;#39; for column, &amp;#39;-n&amp;#39; for&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># numeric&lt;/span>
sort input_file &lt;span style="color:#000;font-weight:bold">|&lt;/span> uniq &amp;gt; output_file &lt;span style="color:#8f5902;font-style:italic"># uniq command removes duplicates and creates file/table&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># with unique lines/fields&lt;/span>
join -1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> -2 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &amp;lt;table1&amp;gt; &amp;lt;table2&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># joins two tables based on specified column numbers&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># (-1 file1, 1: col1; -2: file2, col2). It assumes&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># that join fields are sorted. If that is not the case,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># use the next command:&lt;/span>
sort table1 &amp;gt; table1a&lt;span style="color:#000;font-weight:bold">;&lt;/span> sort table2 &amp;gt; table2a&lt;span style="color:#000;font-weight:bold">;&lt;/span> join -a &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> -t &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#39;\t&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> table1a table2a &amp;gt; table3 &lt;span style="color:#8f5902;font-style:italic"># &amp;#39;-a &amp;lt;table&amp;gt;&amp;#39; prints all lines of specified table!&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Default prints only all lines the two tables have in&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># common. &amp;#39;-t &amp;#34;$(echo -e &amp;#39;\t&amp;#39;)&amp;#34; -&amp;gt;&amp;#39; forces join to&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># use tabs as field separator in its output. Default is&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># space(s)!!!&lt;/span>
cat my_table &lt;span style="color:#000;font-weight:bold">|&lt;/span> cut -d , -f1-3 &lt;span style="color:#8f5902;font-style:italic"># cut command prints only specified sections of a table,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># -d specifies here comma as column separator (tab is&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># default), -f specifies column numbers.&lt;/span>
grep &lt;span style="color:#8f5902;font-style:italic"># see chapter 4&lt;/span>
egrep &lt;span style="color:#8f5902;font-style:italic"># see chapter 4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="screen">Screen&lt;/h2>
&lt;p>Screen references&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://fosswire.com/post/2008/08/video-tutorial-getting-started-with-gnu-screen/">Screen Turorial&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://aperiodic.net/screen/quick_reference">Screen Cheat Sheet&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="starting-a-new-screen-session">Starting a New Screen Session&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">screen &lt;span style="color:#8f5902;font-style:italic"># Start a new session&lt;/span>
screen -S &amp;lt;some-name&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Start a new session and gives it a name&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commands to Control Screen&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">Ctrl-a d &lt;span style="color:#8f5902;font-style:italic"># Detach from the screen session&lt;/span>
Ctrl-a c &lt;span style="color:#8f5902;font-style:italic"># Create a new window inside the screen session&lt;/span>
Ctrl-a Space &lt;span style="color:#8f5902;font-style:italic"># Switch to the next window&lt;/span>
Ctrl-a a &lt;span style="color:#8f5902;font-style:italic"># Switch to the window that you were previously on&lt;/span>
Ctrl-a &lt;span style="color:#4e9a06">&amp;#34; # List all open windows. Double-quotes &amp;#34;&lt;/span> are typed with the Shift key
Ctrl-d or &lt;span style="color:#204a87">type&lt;/span> &lt;span style="color:#204a87">exit&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Exit out of the current window. Exiting form the last window will end the screen session&lt;/span>
Ctrl-a &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Enters the scrolling mode. Use Page Up and Page Down keys to scroll through the window. Hit the Enter key twice to return to normal mode.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="attaching-to-screen-sessions">Attaching to Screen Sessions&lt;/h3>
&lt;p>From any computer, you can attach to a screen session after SSH-ing into a server.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">screen -r &lt;span style="color:#8f5902;font-style:italic"># Attaches to an existing session, if there is only one&lt;/span>
screen -r &lt;span style="color:#8f5902;font-style:italic"># Lists available sessions and their names, if there are more then one session running&lt;/span>
screen -r &amp;lt;some-name&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Attaches to a specific session&lt;/span>
screen -r &amp;lt;first-few-letters-of-name&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Type just the first few letters of the name&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># and you will be attached to the session you need&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="destroying-screen-sessions">Destroying Screen Sessions&lt;/h3>
&lt;ol>
&lt;li>Terminate all programs that are running in the screen session. The standard way to do that is: &lt;code>Ctrl-c&lt;/code>&lt;/li>
&lt;li>Exit out of your shell: &lt;code>exit&lt;/code>&lt;/li>
&lt;li>Repeat steps 1 and 2 until you see the message: &lt;code>[screen is terminating]&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>There may be programs running in different windows of the same screen session. That&amp;rsquo;s why you may need to terminate programs and exit shells multiple time.&lt;/p>
&lt;h3 id="tabs-and-a-reasonably-large-history-buffer">Tabs and a Reasonably Large History Buffer&lt;/h3>
&lt;p>For a better experience with screen, run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cp ~/.screenrc ~/.screenrc.backup 2&amp;gt; /dev/null
&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;startup_message off
&lt;/span>&lt;span style="color:#4e9a06">defscrollback 10240
&lt;/span>&lt;span style="color:#4e9a06">caption always &amp;#34;%{=b dy}{ %{= dm}%H %{=b dy}}%={ %?%{= dc}%-Lw%?%{+b dy}(%{-b r}%n:%t%{+b dy})%?(%u)%?%{-dc}%?%{= dc}%+Lw%? %{=b dy}}&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span> &amp;gt; ~/.screenrc
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="simple-one-liner-shell-scripts">Simple One-Liner Shell Scripts&lt;/h2>
&lt;p>Web page for &lt;a href="http://linuxcommand.org/script_library.php">script download&lt;/a>.&lt;/p>
&lt;p>Renames many files *.old to *.new. To test things first, replace &amp;lsquo;do mv&amp;rsquo; with &amp;lsquo;do echo mv&amp;rsquo;:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in *.input&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> mv &lt;span style="color:#000">$i&lt;/span> &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">/&lt;/span>&lt;span style="color:#4e9a06">\.&lt;/span>&lt;span style="color:#000">old&lt;/span>&lt;span style="color:#000;font-weight:bold">/&lt;/span>&lt;span style="color:#4e9a06">\.&lt;/span>&lt;span style="color:#000">new&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in *&lt;span style="color:#4e9a06">\ &lt;/span>*&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> mv &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$i&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">// /_&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Replaces spaces in files by underscores&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run an application in loops on many input files:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in *.input&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> ./application &lt;span style="color:#000">$i&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run fastacmd from BLAST program in loops on many *.input files and create corresponding *.out files:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in *.input&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> fastacmd -d /data/../database_name -i &lt;span style="color:#000">$i&lt;/span> &amp;gt; &lt;span style="color:#000">$i&lt;/span>.out&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run SAM&amp;rsquo;s target99 on many input files:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in *.pep&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> target99 -db /usr/../database_name -seed &lt;span style="color:#000">$i&lt;/span> -out &lt;span style="color:#000">$i&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
Search in many files &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> a pattern and print occurrences together with file names.
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> j in &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> 9&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> grep -iH &amp;lt;my_pattern&amp;gt; *&lt;span style="color:#000">$j&lt;/span>.seq&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example of how to run an interactive application (tmpred) that asks for file name input/output:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in *.pep&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> &lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$i&lt;/span>&lt;span style="color:#4e9a06">\n\n17\n33\n\n\n&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> ./tmpred &lt;span style="color:#000">$i&lt;/span> &amp;gt; &lt;span style="color:#000">$i&lt;/span>.out&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run BLAST2 for all &lt;em>.fasa1/&lt;/em>.fasta2 file pairs in the order specified by file names and write results into one file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in *.fasta1&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> blast2 -p blastp -i &lt;span style="color:#000">$i&lt;/span> -j &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">/_*fasta1/_*fasta2&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> &amp;gt;&amp;gt; my_out_file&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>This example uses two variables in a for loop. The content of the second variable gets specified in each loop by a replace function.
&lt;/code>&lt;/pre>
&lt;p>Runs BLAST2 in all-against-all mode and writes results into one file ('-F F' turns low-complexity filter off):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in *.fasta&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> j in *.fasta&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> blast2 -p blastp -F F -i &lt;span style="color:#000">$i&lt;/span> -j &lt;span style="color:#000">$j&lt;/span> &amp;gt;&amp;gt; my_out_file&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="how-to-write-a-real-shell-script">How to write a real shell script&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Create file which contains an interpreter as the first line:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Place shell commands in file below the interpreter line using a text editor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make file executable:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">chmod +x my_shell_script
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Run shell script like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./my_shell_script
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Place it into your /rhome/&lt;username>/bin directory&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir -p ~/bin
mv my_shell_script ~/bin/
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Add the bin path to your shell permanently:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;export PATH=~/bin:$PATH&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;span style="color:#204a87">source&lt;/span> ~/.bashrc
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="simple-one-liner-perl-scripts">Simple One-Liner Perl Scripts&lt;/h2>
&lt;p>&lt;em>Small collection of useful one-liners:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-perl" data-lang="perl">&lt;span style="color:#000">perl&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">p&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;s/pattern1/pattern2/g&amp;#39;&lt;/span> &lt;span style="color:#000">my_input_file&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Replaces a pattern in a file by a another pattern using regular expressions.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># $1 or \1: back-references to pattern placed in parentheses&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># -p: lets perl know to write program&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># -i.bak: creates backup file *.bak, only -i doesn&amp;#39;t&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># -w: turns on warnings&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># -e: executable code follows&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Parse lines based on patterns:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-perl" data-lang="perl">&lt;span style="color:#000">perl&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ne&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;print if (/my_pattern1/ ? ($c=1) : (--$c &amp;gt; 0)); print if (/my_pattern2/ ? ($d = 1) : (--$d &amp;gt; 0))&amp;#39;&lt;/span> &lt;span style="color:#000">my_infile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">my_outfile&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Parses lines that contain pattern1 and pattern2.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># The following lines after the pattern can be specified in &amp;#39;$c=1&amp;#39; and &amp;#39;$d=1&amp;#39;.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># For logical OR use this syntax: &amp;#39;/(pattern1|pattern2)/&amp;#39;.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="remote-copy-wget-scp-ncftp">Remote Copy: wget, scp, ncftp&lt;/h2>
&lt;h3 id="wget">Wget&lt;/h3>
&lt;p>Use wget to download a file from the web:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget ftp://ftp.ncbi.nih.... &lt;span style="color:#8f5902;font-style:italic"># file download from www; add option &amp;#39;-r&amp;#39; to download entire directories&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="scp">SCP&lt;/h3>
&lt;p>Use scp to copy files between machines (ie. laptop to server):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">scp &lt;span style="color:#204a87">source&lt;/span> target &lt;span style="color:#8f5902;font-style:italic"># Use form &amp;#39;userid@machine_name&amp;#39; if your local and remote user ids are different.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># If they are the same you can use only &amp;#39;machine_name&amp;#39;.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here are more scp examples:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">scp user@remote_host:file.name . &lt;span style="color:#8f5902;font-style:italic"># Copies file from server to local machine (type from local&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># machine prompt). The &amp;#39;.&amp;#39; copies to pwd, you can specify # here any directory, use wildcards to copy many files.&lt;/span>
scp file.name user@remote_host:~/dir/newfile.name
&lt;span style="color:#8f5902;font-style:italic"># Copies file from local machine to server.&lt;/span>
scp -r user@remote_host:directory/ ~/dir
&lt;span style="color:#8f5902;font-style:italic"># Copies entire directory from server to local machine.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nice-ftp">Nice FTP&lt;/h3>
&lt;p>From the linux command line run ncftp and use it to get files:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ncftp
ncftp&amp;gt; open ftp.ncbi.nih.gov
ncftp&amp;gt; &lt;span style="color:#204a87">cd&lt;/span> /blast/executables
ncftp&amp;gt; get blast.linux.tar.Z &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>skip extension: @&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
ncftp&amp;gt; bye
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="archiving-and-compressing">Archiving and Compressing&lt;/h2>
&lt;h3 id="creating-archives">Creating Archives&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">tar -cvf my_file.tar mydir/ &lt;span style="color:#8f5902;font-style:italic"># Builds tar archive of files or directories. For directories, execute command in parent directory. Don&amp;#39;t use absolute path. &lt;/span>
tar -czvf my_file.tgz mydir/ &lt;span style="color:#8f5902;font-style:italic"># Builds tar archive with compression of files or directories. For&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># directories, execute command in parent directory. Don&amp;#39;t use absolute path.&lt;/span>
zip -r mydir.zip mydir/ &lt;span style="color:#8f5902;font-style:italic"># Command to archive a directory (here mydir) with zip.&lt;/span>
tar -jcvf mydir.tar.bz2 mydir/ &lt;span style="color:#8f5902;font-style:italic"># Creates *.tar.bz2 archive&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="viewing-archives">Viewing Archives&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">tar -tvf my_file.tar
tar -tzvf my_file.tgz
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="extracting-archives">Extracting Archives&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">tar -xvf my_file.tar
tar -xzvf my_file.tgz
gunzip my_file.tar.gz &lt;span style="color:#8f5902;font-style:italic"># or unzip my_file.zip, uncompress my_file.Z,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># or bunzip2 for file.tar.bz2&lt;/span>
find -name &lt;span style="color:#4e9a06">&amp;#39;*.zip&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> xargs -n &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> unzip &lt;span style="color:#8f5902;font-style:italic"># this command usually works for unzipping&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># many files that were compressed under Windows&lt;/span>
tar -jxvf mydir.tar.bz2 &lt;span style="color:#8f5902;font-style:italic"># Extracts *.tar.bz2 archive&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Try also:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">tar zxf blast.linux.tar.Z
tar xvzf file.tgz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Important options:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">f: use archive file
p: preserve permissions
v: list files processed
x: exclude files listed in FILE
z: filter the archive through gzip
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="simple-installs">Simple Installs&lt;/h2>
&lt;h3 id="systems-wide-installations">Systems-wide installations&lt;/h3>
&lt;h3 id="applications-in-user-accounts">Applications in user accounts&lt;/h3>
&lt;h3 id="installation-of-rpms">Installation of RPMs&lt;/h3>
&lt;h2 id="environment-variables">Environment Variables&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">xhost user@host &lt;span style="color:#8f5902;font-style:italic"># adds X permissions for user on server.&lt;/span>
&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$DISPLAY&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># shows current display settings&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">DISPLAY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;local_IP&amp;gt;:0 &lt;span style="color:#8f5902;font-style:italic"># change environment variable&lt;/span>
unsetenv DISPLAY &lt;span style="color:#8f5902;font-style:italic"># removes display variable&lt;/span>
env &lt;span style="color:#8f5902;font-style:italic"># prints all environment variables&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>List of directories that the shell will search when you type a command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$PATH&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can edit your default DISPLAY setting for your account by adding it to file .bash_profile&lt;/p>
&lt;h2 id="exercises">Exercises&lt;/h2>
&lt;h3 id="exercise-1">Exercise 1&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Download proteome of Halobacterium spec. with wget and look at it:&lt;/p>
&lt;pre>&lt;code>module load ncbi-blast/2.2.26 # Loads legacy blastall
wget ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/archaea/Halobacterium_salinarum/representative/GCA_000069025.1_ASM6902v1/GCA_000069025.1_ASM6902v1_protein.faa.gz
gunzip GCA_000069025.1_ASM6902v1_protein.faa.gz
mv GCA_000069025.1_ASM6902v1_protein.faa AE004437.faa
less AE004437.faa # press q to quit
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Simple Analysis:&lt;/p>
&lt;p>a. How many predicted proteins are there?&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">grep &lt;span style="color:#4e9a06">&amp;#39;^&amp;gt;&amp;#39;&lt;/span> AE004437.faa --count
&lt;/code>&lt;/pre>&lt;/div>&lt;p>b. How many proteins contain the pattern &amp;ldquo;WxHxxH&amp;rdquo; or &amp;ldquo;WxHxxHH&amp;rdquo;?&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">egrep &lt;span style="color:#4e9a06">&amp;#39;W.H..H{1,2}&amp;#39;&lt;/span> AE004437.faa --count
&lt;/code>&lt;/pre>&lt;/div>&lt;p>c. Use the find function (/) in &amp;lsquo;less&amp;rsquo; to fish out the protein IDs containing the pattern or more elegantly do it with awk:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">awk --posix -v &lt;span style="color:#000">RS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/W.H..(H){1,2}/ { print &amp;#34;&amp;gt;&amp;#34; $0;}&amp;#39;&lt;/span> AE004437.faa &lt;span style="color:#000;font-weight:bold">|&lt;/span> less &lt;span style="color:#8f5902;font-style:italic"># press q to quit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Create a BLASTable database with formatdb:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ls &lt;span style="color:#8f5902;font-style:italic"># before&lt;/span>
formatdb -i AE004437.faa -p T -o T
ls &lt;span style="color:#8f5902;font-style:italic"># after&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;-p F&amp;#39;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> nucleotide and &lt;span style="color:#4e9a06">&amp;#39;-p T&amp;#39;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> protein database&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;-o T&amp;#39;&lt;/span> parse SeqId and create indexes
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Generate myseq.fasta&lt;/p>
&lt;p>a. Generate list of sequence IDs for the above pattern match result (i.e. retrieve my_IDs from step 2c). Alternatively, download the pre-generated file with wget.&lt;/p>
&lt;p>b. Retrieve the corresponding sequences for these IDs with the fastacmd command from the blastable database:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget https://cluster.hpcc.ucr.edu/~tgirke/Documents/UNIX/my_IDs
fastacmd -d AE004437.faa -i my_IDs &amp;gt; myseq.fasta
less myseq.fasta &lt;span style="color:#8f5902;font-style:italic"># press q to quit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>(Optional) Looking at several different patterns:&lt;/p>
&lt;p>a. Generate several lists of sequence IDs from various pattern match results (i.e. retrieve a.my_ids, b.my_ids, and c.my_ids from step 2c).&lt;/p>
&lt;p>b. Retrieve the sequences in one step using the fastacmd in a for-loop:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in *.my_ids&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> fastacmd -d AE004437.faa -i &lt;span style="color:#000">$i&lt;/span> &amp;gt; &lt;span style="color:#000">$i&lt;/span>.fasta&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Run blastall with a few proteins in myseq.fasta against your newly created Halobacterium proteome database.&lt;/p>
&lt;p>Create first a complete blast output file including alignments. In a second step use the &amp;rsquo;m -8' option to obtain a tabular output (i.e. tab separated values):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">blastall -p blastp -i myseq.fasta -d AE004437.faa -o blastp.out -e 1e-6 -v &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> -b &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
blastall -p blastp -i myseq.fasta -d AE004437.faa -m &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> -e 1e-6 &amp;gt; blastp.tab
less blastp.out &lt;span style="color:#8f5902;font-style:italic"># press q to quit&lt;/span>
less -S blastp.tab &lt;span style="color:#8f5902;font-style:italic"># -S disables line wrapping, press q to quit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The filed descriptions of the Blast tabular output (from the &amp;ldquo;-m 8&amp;rdquo; option) are available here:&lt;/p>
&lt;pre>&lt;code>1 Query (The query sequence id)
2 Subject (The matching subject sequence id)
3 % id
4 alignment length
5 mismatches
6 gap openings
7 q.start
8 q.end
9 s.start
10 s.end
11 e-value
12 bit score
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>Is your blastp.out file equivalent to this one?&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Parse blastall output into Excel spread sheet&lt;/p>
&lt;p>a. Using biocore parser&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">blastParse -i blastp.out -o blast.xls -c &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>b. Using BioPerl parser&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">bioblastParse.pl blastp.out &amp;gt; blastparse.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="exercise-2">Exercise 2&lt;/h3>
&lt;p>Split sample fasta batch file with csplit (use sequence file myseq.fasta from Exercise 1).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">csplit -z myseq.fasta &lt;span style="color:#4e9a06">&amp;#39;/&amp;gt;/&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;{*}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Delete some of the files generated by csplit
Concatenate single fasta files from (step 1) into to one file with cat (e.g. &lt;code>cat file1 file2 file3 &amp;gt; bigfile&lt;/code>).
BLAST two related sequences, retrieve the result in tabular format and use &lt;code>comm&lt;/code> to identify common hit IDs in the two tables.&lt;/p>
&lt;h3 id="exercise-3">Exercise 3&lt;/h3>
&lt;p>Run HMMPFAM search with proteins from Exercise 1 against Pfam database (will take ~3 minutes)&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">hmmscan -E 0.1 --acc /srv/projects/db/pfam/2011-12-09-Pfam26.0/Pfam-A.hmm myseq.fasta &amp;gt; output.pfam
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easier to parse/process tabular output&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">hmmscan -E 0.1 --acc --tblout output.pfam /srv/projects/db/pfam/2011-12-09-Pfam26.0/Pfam-A.hmm myseq.fasta &lt;span style="color:#8f5902;font-style:italic"># also try --domtblout&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which query got the most hits? How many hits were found that query?&lt;/p>
&lt;h3 id="exercise-4">Exercise 4&lt;/h3>
&lt;p>Create multiple alignment with ClustalW (e.g. use sequences with &amp;lsquo;W.H..HH&amp;rsquo; pattern)&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">clustalw myseq.fasta
mv myseq.aln myalign.aln
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="exercise-5">Exercise 5&lt;/h3>
&lt;p>Reformat alignment into PHYILIP format using &amp;lsquo;seqret&amp;rsquo; from EMBOSS&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">seqret clustal::myalign.aln phylip::myalign.phylip
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="exercise-6">Exercise 6&lt;/h3>
&lt;p>Create neighbor-joining tree with PHYLIP&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cp myalign.phylip infile
protdist &lt;span style="color:#8f5902;font-style:italic"># creates distance matrix (you may need to press &amp;#39;R&amp;#39; and then &amp;#39;Y&amp;#39;)&lt;/span>
cp outfile infile
neighbor &lt;span style="color:#8f5902;font-style:italic"># use default settings (press &amp;#39;Y&amp;#39;)&lt;/span>
cp outtree intree
&lt;/code>&lt;/pre>&lt;/div>&lt;p>retree # displays tree and can use midpoint method for defining root of tree, my typical command sequence is: &amp;lsquo;N&amp;rsquo; (until you see PHYLIP) &amp;lsquo;Y&amp;rsquo; &amp;lsquo;M&amp;rsquo; &amp;lsquo;W&amp;rsquo; &amp;lsquo;R&amp;rsquo; &amp;lsquo;R&amp;rsquo; &amp;lsquo;X&amp;rsquo;&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cp outtree tree.dnd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>View your tree in TreeBrowse or open it in TreeView&lt;/p></description></item><item><title>Documentation: Streams</title><link>/documentation/basics/manuals_linux-basics_streams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/documentation/basics/manuals_linux-basics_streams/</guid><description>
&lt;h2 id="streams">Streams&lt;/h2>
&lt;p>On the command line, or terminal, there are three very important lanes where information can be sent, we call these &lt;code>streams&lt;/code>.
A single command can take information in from &lt;code>STDIN&lt;/code> and then send information out on both &lt;code>STDOUT&lt;/code> and &lt;code>STDERR&lt;/code> simultaneously.&lt;/p>
&lt;h3 id="stdin">STDIN&lt;/h3>
&lt;p>For example, we can send the contents of a file as a &lt;code>STDIN&lt;/code> steam to the &lt;code>wc&lt;/code> command in order to count the lines:&lt;/p>
&lt;pre>&lt;code>wc -l &amp;lt; file.txt
&lt;/code>&lt;/pre>&lt;h3 id="stdout">STDOUT&lt;/h3>
&lt;p>The &lt;code>STDOUT&lt;/code> steam is probably the most often used, since this is how commands send information to the screen.
However, if we do not want the information printed to the screen, we can send it into a file for later review:&lt;/p>
&lt;pre>&lt;code>ls &amp;gt; output.txt # Overwrite contents in output file with `ls` results
&lt;/code>&lt;/pre>&lt;p>You can also append to the same file, if more information is to be saved:&lt;/p>
&lt;pre>&lt;code>ls &amp;gt;&amp;gt; output.txt # Append results from `ls` to the bottom of the file
&lt;/code>&lt;/pre>&lt;h3 id="stderr">STDERR&lt;/h3>
&lt;p>The error stream is very useful to separate error messages (or warnings) from real output (your results).
Since there is no &lt;code>-e&lt;/code> flag for the &lt;code>ls&lt;/code> command this will generate an error. We can then store this error in a by redirecting the error stream with &lt;code>2&amp;gt;&lt;/code>.&lt;/p>
&lt;pre>&lt;code>ls -e 2&amp;gt; errors.txt
&lt;/code>&lt;/pre>&lt;h3 id="tips">Tips&lt;/h3>
&lt;h4 id="combined-streams">Combined streams&lt;/h4>
&lt;p>If you want to combined your &lt;code>STDOUT&lt;/code> with your &lt;code>STDERR&lt;/code> stream and store it into a file, you can do this with &lt;code>&amp;amp;&amp;gt;&lt;/code>, like so:&lt;/p>
&lt;pre>&lt;code>command &amp;amp;&amp;gt; output_and_errors.txt
&lt;/code>&lt;/pre>&lt;h4 id="trash-streams">Trash Streams&lt;/h4>
&lt;p>If you want to ignore all information from &lt;code>STDOUT&lt;/code> and &lt;code>STDERR&lt;/code> you can send both of these streams to the trash (&lt;code>/dev/null&lt;/code>):&lt;/p>
&lt;pre>&lt;code>command &amp;amp;&amp;gt; /dev/null
&lt;/code>&lt;/pre>&lt;p>This can be useful when you are only interested in the resulting file that your command will create.&lt;/p></description></item><item><title>Documentation: Text Editors</title><link>/documentation/basics/manuals_linux-basics_text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/documentation/basics/manuals_linux-basics_text/</guid><description>
&lt;h2 id="text-viewing">Text Viewing&lt;/h2>
&lt;p>Here are a few commands that are used to just display the text within a file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">more &amp;lt;FILENAME&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Views text, use space bar to browse, &amp;#39;q&amp;#39; to quit&lt;/span>
less &amp;lt;FILENAME&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Also views text, uses arrow keys to browse, &amp;#39;q&amp;#39; to quit&lt;/span>
cat &amp;lt;FILENAME&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># Concatenates files and prints content to screen&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="text-editors">Text Editors&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Nano&lt;/strong>
&lt;ul>
&lt;li>A simple terminal-based editor.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Neovim&lt;/strong>
&lt;ul>
&lt;li>Non-graphical (terminal-based) editor. Neovim is an improved version of vim.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Vim&lt;/strong> &lt;strong>Gvim&lt;/strong>
&lt;ul>
&lt;li>Non-graphical (&lt;code>vim&lt;/code>) or window-based editor (&lt;code>gvim&lt;/code>). Vim is the improved version of vi.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Emacs&lt;/strong>
&lt;ul>
&lt;li>Non-graphical or window-based editor.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Atom&lt;/strong>
&lt;ul>
&lt;li>Window-based editor that runs on your local machine.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="nano">Nano&lt;/h2>
&lt;p>The &lt;code>nano&lt;/code> editor is the simplest to use and can be good for beginners:&lt;/p>
&lt;pre>&lt;code>nano &amp;lt;FILENAME&amp;gt; # Open file if it exists, or create it
&lt;/code>&lt;/pre>&lt;p>Navigation in &lt;code>nano&lt;/code> uses the arrow keys, and all other commands are noted at the bottom of the screen.
The &lt;code>CTRL&lt;/code> key is used in combination with other keys to execute commands in &lt;code>nano&lt;/code>.&lt;/p>
&lt;p>For example, at the bottom of the &lt;code>nano&lt;/code> screen it is noted that &lt;code>^X&lt;/code> is used to exit.
This means you will need to hold the &lt;code>CTRL&lt;/code> key and then press &lt;code>x&lt;/code> in order to quit.
After that, just follow the on screen prompts at the bottom.&lt;/p>
&lt;p>For more &lt;code>nano&lt;/code> commands, please visit &lt;a href="https://www.nano-editor.org/dist/latest/cheatsheet.html">Overview of nano shortcuts&lt;/a>.&lt;/p>
&lt;h2 id="neovim--vim--gvim--vi">Neovim / Vim / GVim / VI&lt;/h2>
&lt;p>All of these editors follow the same principals.&lt;/p>
&lt;pre>&lt;code>nvim &amp;lt;FILENAME&amp;gt; # Open file if it exists, or create it
vim &amp;lt;FILENAME&amp;gt; # Open file if it exists, or create it
gvim &amp;lt;FILENAME&amp;gt; # Open file if it exists, or create it (must have XForwarding or VNC)
vi &amp;lt;FILENAME&amp;gt; # Open file if it exists, or create it
&lt;/code>&lt;/pre>&lt;p>For more information please visit &lt;a href="manuals_linux-basics_vim">Vim Manual&lt;/a>.&lt;/p>
&lt;h2 id="emacs">Emacs&lt;/h2>
&lt;p>Navigation in &lt;code>emacs&lt;/code> also uses the arrow keys. It is similar to &lt;code>nano&lt;/code>, in that, &lt;code>CTRL&lt;/code> is combined with other keys to execute commands.&lt;/p>
&lt;p>For example, to open a file, simply run the command with a file name:&lt;/p>
&lt;pre>&lt;code>emacs &amp;lt;FILENAME&amp;gt; # Open file if it exists, or create it
&lt;/code>&lt;/pre>&lt;p>Then, after you have made some changes, exit by holding the &lt;code>CTRL&lt;/code> key and then pressing &lt;code>c&lt;/code>, releasing and then holding the &lt;code>CTRL&lt;/code> key once more and pressing &lt;code>c&lt;/code> again.
After that, just follow the on screen prompts at the bottom.&lt;/p>
&lt;p>For more commands in &lt;code>emacs&lt;/code> please visit &lt;a href="https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf">GNU Emacs Reference Card&lt;/a>&lt;/p>
&lt;h2 id="atom">Atom&lt;/h2>
&lt;h3 id="install">Install&lt;/h3>
&lt;p>This editor should be installed on your local machine (ie. workstation, laptop).
Please visit &lt;a href="https://atom.io/">Atom&lt;/a> for software download.&lt;/p>
&lt;h3 id="remote-atom">Remote Atom&lt;/h3>
&lt;p>After you have &lt;code>atom&lt;/code> installed, you need to install the &lt;code>Remote Atom&lt;/code> plugin.
Click on &lt;code>edit&lt;/code>, then &lt;code>preferences&lt;/code>, then look for the &lt;code>install&lt;/code> item on the left side menu.
You should then be able to type &lt;code>remote-atom&lt;/code> in the search field, find it and install it.
After installation, &lt;code>atom&lt;/code> should restart.&lt;/p>
&lt;h3 id="start-server">Start Server&lt;/h3>
&lt;p>Once you have &lt;code>remote-atom&lt;/code> installed, click &lt;code>Packages&lt;/code> in the top menu, then &lt;code>Remote Atom&lt;/code>, and then click &lt;code>Start Server&lt;/code>.
&lt;code>Atom&lt;/code> may need to be restarted in order for you to see these new menu items.&lt;/p>
&lt;h3 id="cluster">Cluster&lt;/h3>
&lt;p>SSH into cluster using a socket (replace &lt;code>&amp;lt;USERNAME&amp;gt;&lt;/code> with your real username on the cluster):&lt;/p>
&lt;pre>&lt;code>ssh -R /rhome/&amp;lt;USERNAME&amp;gt;/.rmate.socket:localhost:52698 cluster.hpcc.ucr.edu
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>Note: Do not use a remote PORT, you must use a SOCKET FILE as shown above. There are security issues otherwise.&lt;/p>
&lt;/blockquote>
&lt;p>After you have logged into the cluster load &lt;code>rmate&lt;/code> (alias is optional):&lt;/p>
&lt;pre>&lt;code>module load rmate
alias ratom=rmate
&lt;/code>&lt;/pre>&lt;p>You can add this into your &lt;code>~/.bashrc&lt;/code> for convenience.&lt;/p>
&lt;p>Then you should be able to open a file on the cluster and have it appear on your local machine:&lt;/p>
&lt;pre>&lt;code>rmate &amp;lt;FILENAME&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Once you have finished all your editing and close &lt;code>atom&lt;/code>, be sure to delete the socket file from the cluster:&lt;/p>
&lt;pre>&lt;code>rm -f /rhome/&amp;lt;USERNAME&amp;gt;/.rmate.socket'
&lt;/code>&lt;/pre>&lt;p>For more information regarding &lt;code>remote-atom&lt;/code>, please visit &lt;a href="https://atom.io/packages/remote-atom">Remote-Atom&lt;/a>.&lt;/p></description></item><item><title>Documentation: Variables</title><link>/documentation/basics/manuals_linux-basics_variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/documentation/basics/manuals_linux-basics_variables/</guid><description>
&lt;h2 id="variables">Variables&lt;/h2>
&lt;p>The HPCC cluster uses bash as the default shell environment. Within this environment, variables can be set and reused.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;pre>&lt;code>MYVAR=’Something’
export MYVAR=’Something’
echo $MYVAR
&lt;/code>&lt;/pre>&lt;h3 id="default-variables">Default Variables&lt;/h3>
&lt;p>Some softwares utilize this feature and require that specific environment variables be set.
For example, every time you login, the following variables are set by default:&lt;/p>
&lt;pre>&lt;code>echo $HOME #Contains your home path
echo $USER #Contains your username
echo $PATH #Contains paths of executables
echo $LD_LIBRARY_PATH #Contains paths of library dependencies
&lt;/code>&lt;/pre>&lt;h3 id="finding-variables">Finding Variables&lt;/h3>
&lt;p>To see a list of all variables currently set in your shell, use the &lt;code>env&lt;/code> command.
You can also &lt;code>grep&lt;/code> through this list to find variables, like so:&lt;/p>
&lt;pre>&lt;code>env | grep -i home
&lt;/code>&lt;/pre>&lt;p>Or if you are in a &lt;code>Slurm&lt;/code> job, you can find all related &lt;code>Slurm&lt;/code> variables:&lt;/p>
&lt;pre>&lt;code>env | grep -i slurm
&lt;/code>&lt;/pre>&lt;h3 id="setting-variables">Setting variables&lt;/h3>
&lt;p>Try to choose unique names when setting variables.
It is best to not overwrite a variable that is already set, unless on purpose.&lt;/p>
&lt;p>To set a variable in your current shell, you can do so like this:&lt;/p>
&lt;pre>&lt;code>MYVAR='Something Important'
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>Notice that there is no spaces around the &lt;code>=&lt;/code> sign.&lt;/p>
&lt;/blockquote>
&lt;p>If you would like to set a variable that is carried over to all other commands or sub-shells, then it must be &lt;code>exported&lt;/code>:&lt;/p>
&lt;pre>&lt;code>export MYVAR='Something Important'
&lt;/code>&lt;/pre></description></item></channel></rss>